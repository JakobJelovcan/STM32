
stm32h7-asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c4  080004c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080004cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000010  080004dc  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400002c  080004dc  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_line   00000328  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000000dc  00000000  00000000  00020366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000074  00000000  00000000  00020442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000000d0  00000000  00000000  000204b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000000d7  00000000  00000000  00020588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000040  00000000  00000000  00020660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000094  00000000  00000000  000206a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080004ac 	.word	0x080004ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080004ac 	.word	0x080004ac

080002d8 <init_green_led>:

	.type 	init_green_led %function
	.global init_green_led

init_green_led:
	push { r0, r1, lr }
 80002d8:	b503      	push	{r0, r1, lr}
	ldr r0, =RCC_AHB4ENR
 80002da:	4828      	ldr	r0, [pc, #160]	; (800037c <loop_button+0xc>)
	ldr r1, [r0]
 80002dc:	6801      	ldr	r1, [r0, #0]
	orr r1, #(1 << 9)
 80002de:	f441 7100 	orr.w	r1, r1, #512	; 0x200
	str r1, [r0]
 80002e2:	6001      	str	r1, [r0, #0]

	ldr r0, =GPIOJ_BASE
 80002e4:	4826      	ldr	r0, [pc, #152]	; (8000380 <loop_button+0x10>)
	ldr r1, [r0, #GPIOx_MODER]
 80002e6:	6801      	ldr	r1, [r0, #0]
	and r1, #0xFFFFFFCF
 80002e8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
	orr r1, #0x00000010
 80002ec:	f041 0110 	orr.w	r1, r1, #16
	str r1, [r0, #GPIOx_MODER]
 80002f0:	6001      	str	r1, [r0, #0]

	pop { r0, r1, pc }
 80002f2:	bd03      	pop	{r0, r1, pc}

080002f4 <init_red_led>:

	.type	init_red_led %function
	.global	init_red_led

init_red_led:
	push { r0, r1, lr }
 80002f4:	b503      	push	{r0, r1, lr}
	ldr r0, =RCC_AHB4ENR
 80002f6:	4821      	ldr	r0, [pc, #132]	; (800037c <loop_button+0xc>)
	ldr r1, [r0]
 80002f8:	6801      	ldr	r1, [r0, #0]
	orr r1, #(1 << 8)
 80002fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	str r1, [r0]
 80002fe:	6001      	str	r1, [r0, #0]

	ldr r0, =GPIOI_BASE
 8000300:	4820      	ldr	r0, [pc, #128]	; (8000384 <loop_button+0x14>)
	ldr r1, [r0, #GPIOx_MODER]
 8000302:	6801      	ldr	r1, [r0, #0]
	and r1, #0xF3FFFFFF
 8000304:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
	orr r1, #0x04000000
 8000308:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
	str r1, [r0, #GPIOx_MODER]
 800030c:	6001      	str	r1, [r0, #0]

	pop { r0, r1, pc }
 800030e:	bd03      	pop	{r0, r1, pc}

08000310 <init_button>:

	.type	init_button %function
	.global	init_button

init_button:
	push { r0, r1, r2, lr }
 8000310:	b507      	push	{r0, r1, r2, lr}
	ldr r0, =RCC_AHB4ENR
 8000312:	481a      	ldr	r0, [pc, #104]	; (800037c <loop_button+0xc>)
	ldr r1, [r0]
 8000314:	6801      	ldr	r1, [r0, #0]
	orr r1, #0x00000004
 8000316:	f041 0104 	orr.w	r1, r1, #4
	str r1, [r0]
 800031a:	6001      	str	r1, [r0, #0]

	ldr r0, =GPIOC_BASE
 800031c:	481a      	ldr	r0, [pc, #104]	; (8000388 <loop_button+0x18>)
	ldr r1, [r0, #GPIOx_MODER]
 800031e:	6801      	ldr	r1, [r0, #0]
	and r1, #0xF3FFFFFF
 8000320:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
	str r1, [r0, #GPIOx_MODER]
 8000324:	6001      	str	r1, [r0, #0]

	ldr r1, [r0, #GPIOx_PUPDR]
 8000326:	68c1      	ldr	r1, [r0, #12]
	ldr r2, =GPIOx_PUPDR_CLEAR
 8000328:	f06f 6240 	mvn.w	r2, #201326592	; 0xc000000
	and r1, r2
 800032c:	ea01 0102 	and.w	r1, r1, r2
	ldr r2, =GPIOx_PUPDR_SET
 8000330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	orr r1, r2
 8000334:	ea41 0102 	orr.w	r1, r1, r2
	str r1, [r0, #GPIOx_PUPDR]
 8000338:	60c1      	str	r1, [r0, #12]

	pop { r0, r1, r2, pc }
 800033a:	bd07      	pop	{r0, r1, r2, pc}

0800033c <green_led_on>:

	.type	green_led_on %function
	.global green_led_on

green_led_on:
	push { r0, r1, lr }
 800033c:	b503      	push	{r0, r1, lr}

	ldr r0, =GPIOJ_BASE
 800033e:	4810      	ldr	r0, [pc, #64]	; (8000380 <loop_button+0x10>)
	mov r1, #LED_GREEN_ON
 8000340:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	str r1, [r0, #GPIOx_BSSR]
 8000344:	6181      	str	r1, [r0, #24]

	pop { r0, r1, pc }
 8000346:	bd03      	pop	{r0, r1, pc}

08000348 <green_led_off>:

	.type 	green_led_off %function
	.global green_led_off

green_led_off:
	push { r0, r1, lr }
 8000348:	b503      	push	{r0, r1, lr}

	ldr r0, =GPIOJ_BASE
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <loop_button+0x10>)
	mov r1, #LED_GREEN_OFF
 800034c:	f04f 0104 	mov.w	r1, #4
	str r1, [r0, #GPIOx_BSSR]
 8000350:	6181      	str	r1, [r0, #24]

	pop { r0, r1, pc }
 8000352:	bd03      	pop	{r0, r1, pc}

08000354 <red_led_on>:

	.type	red_led_on %function
	.global red_led_on

red_led_on:
	push { r0, r1, lr }
 8000354:	b503      	push	{r0, r1, lr}

	ldr r0, =GPIOI_BASE
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <loop_button+0x14>)
	mov r1, #LED_RED_ON
 8000358:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	str r1, [r0, #GPIOx_BSSR]
 800035c:	6181      	str	r1, [r0, #24]

	pop { r0, r1, pc }
 800035e:	bd03      	pop	{r0, r1, pc}

08000360 <red_led_off>:

	.type	red_led_off %function
	.global	red_led_off

red_led_off:
	push { r0, r1, lr }
 8000360:	b503      	push	{r0, r1, lr}

	ldr r0, =GPIOI_BASE
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <loop_button+0x14>)
	mov r1, #LED_RED_OFF
 8000364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	str r1, [r0, #GPIOx_BSSR]
 8000368:	6181      	str	r1, [r0, #24]

	pop { r0, r1, pc }
 800036a:	bd03      	pop	{r0, r1, pc}

0800036c <wait_button>:

	.type	wait_button %function
	.global	wait_button
wait_button:
	push { r0, r1, lr }
 800036c:	b503      	push	{r0, r1, lr}

	ldr r0, =GPIOC_BASE
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <loop_button+0x18>)

08000370 <loop_button>:
loop_button:
	ldr r1, [r0, #GPIOx_IDR]
 8000370:	6901      	ldr	r1, [r0, #16]
	tst r1, #(1 << 13)
 8000372:	f411 5f00 	tst.w	r1, #8192	; 0x2000
	beq loop_button
 8000376:	d0fb      	beq.n	8000370 <loop_button>

	pop { r0, r1, pc }
 8000378:	bd03      	pop	{r0, r1, pc}
 800037a:	0000      	.short	0x0000
	ldr r0, =RCC_AHB4ENR
 800037c:	580244e0 	.word	0x580244e0
	ldr r0, =GPIOJ_BASE
 8000380:	58022400 	.word	0x58022400
	ldr r0, =GPIOI_BASE
 8000384:	58022000 	.word	0x58022000
	ldr r0, =GPIOC_BASE
 8000388:	58020800 	.word	0x58020800

0800038c <main>:

  		.type  main, %function
  		.global main
   	   	.align
main:
		bl init_red_led
 800038c:	f7ff ffb2 	bl	80002f4 <init_red_led>
		bl red_led_off
 8000390:	f7ff ffe6 	bl	8000360 <red_led_off>
		bl init_tc0_psp
 8000394:	f000 f815 	bl	80003c2 <init_tc0_psp>

08000398 <__end>:

__end: 	b 	__end
 8000398:	e7fe      	b.n	8000398 <__end>
 800039a:	bf00      	nop

0800039c <init_tc0_ms>:

.type	init_tc0_ms %function
.global	init_tc0_ms

init_tc0_ms:
	push { r0, lr }
 800039c:	b501      	push	{r0, lr}

	ldr r0, =SYSTICK_RELOAD_1MS
 800039e:	f64f 10ff 	movw	r0, #63999	; 0xf9ff
	bl	init_tc0
 80003a2:	f000 f801 	bl	80003a8 <init_tc0>

	pop { r0, pc }
 80003a6:	bd01      	pop	{r0, pc}

080003a8 <init_tc0>:

.type 	init_tc0 %function
.global init_tc0

init_tc0:
	push { r0, r1, lr }
 80003a8:	b503      	push	{r0, r1, lr}
	ldr r1, =SCS_BASE
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	ldr r0, =SYSTICK_RELOAD_1MS
 80003ae:	f64f 10ff 	movw	r0, #63999	; 0xf9ff
	str r0, [r1, #SCS_SYST_RVR]
 80003b2:	6148      	str	r0, [r1, #20]

	mov r0, #0
 80003b4:	f04f 0000 	mov.w	r0, #0
	str r0, [r0, #SCS_SYST_CVR]
 80003b8:	6180      	str	r0, [r0, #24]

	mov r0, #0x05
 80003ba:	f04f 0005 	mov.w	r0, #5
	str r0, [r1, #SCS_SYST_CSR]
 80003be:	6108      	str	r0, [r1, #16]

	pop { r0, r1, pc }
 80003c0:	bd03      	pop	{r0, r1, pc}

080003c2 <init_tc0_psp>:

.type 	init_tc0_psp %function
.global init_tc0_psp

init_tc0_psp:
	push { r4, r5, lr }
 80003c2:	b530      	push	{r4, r5, lr}
	ldr r4, =SCS_BASE
 80003c4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	ldr r5, =SYSTICK_RELOAD_1MS
 80003c8:	f64f 15ff 	movw	r5, #63999	; 0xf9ff
	str r5, [r4, #SCS_SYST_RVR]
 80003cc:	6165      	str	r5, [r4, #20]

	mov r5, #0
 80003ce:	f04f 0500 	mov.w	r5, #0
	str r5, [r5, #SCS_SYST_CVR]
 80003d2:	61ad      	str	r5, [r5, #24]

	mov r5, #0b111
 80003d4:	f04f 0507 	mov.w	r5, #7
	str r5, [r4, #SCS_SYST_CSR]
 80003d8:	6125      	str	r5, [r4, #16]

	pop { r4, r5, pc }
 80003da:	bd30      	pop	{r4, r5, pc}

080003dc <delay_tc>:

.type 	delay_tc %function
.global delay_tc

delay_tc:
	push { r1, r2, lr }
 80003dc:	b506      	push	{r1, r2, lr}
	ldr r1, =SCS_BASE
 80003de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000

080003e2 <delay_loop>:
delay_loop:
	ldr r2, [r1, #SCS_SYST_CSR]
 80003e2:	690a      	ldr	r2, [r1, #16]
	tst r2, #0x10000
 80003e4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
	beq delay_loop
 80003e8:	d0fb      	beq.n	80003e2 <delay_loop>
	subs r0, #1
 80003ea:	3801      	subs	r0, #1
	bne delay_loop
 80003ec:	d1f9      	bne.n	80003e2 <delay_loop>
	pop { r1, r2, pc }
 80003ee:	bd06      	pop	{r1, r2, pc}

080003f0 <SysTick_Handler>:
.global 	SysTick_Handler
.section  	.text.SysTick_Handler,"ax",%progbits
.type  		SysTick_Handler, %function

SysTick_Handler:
	push { r4, r5, r6, lr }
 80003f0:	b570      	push	{r4, r5, r6, lr}

	ldr r4, =MSECCNT
 80003f2:	4c0e      	ldr	r4, [pc, #56]	; (800042c <RET+0x2>)
	ldr r5, [r4]
 80003f4:	6825      	ldr	r5, [r4, #0]
	add r5, #1
 80003f6:	f105 0501 	add.w	r5, r5, #1
	str r5, [r4]
 80003fa:	6025      	str	r5, [r4, #0]

	ldr r4, =MSECMAX
 80003fc:	4c0c      	ldr	r4, [pc, #48]	; (8000430 <RET+0x6>)
	ldr r6, [r4]
 80003fe:	6826      	ldr	r6, [r4, #0]

	cmp r5, r6
 8000400:	42b5      	cmp	r5, r6

	bne RET
 8000402:	d112      	bne.n	800042a <RET>

	ldr r4, =MSECCNT
 8000404:	4c09      	ldr	r4, [pc, #36]	; (800042c <RET+0x2>)
	ldr r5, =0x00
 8000406:	f04f 0500 	mov.w	r5, #0
	str r5, [r4]
 800040a:	6025      	str	r5, [r4, #0]

	ldr r4, =LED_STATUS
 800040c:	4c09      	ldr	r4, [pc, #36]	; (8000434 <RET+0xa>)
	ldr r5, [r4]
 800040e:	6825      	ldr	r5, [r4, #0]
	ldr r6, =0x01
 8000410:	f04f 0601 	mov.w	r6, #1
	cmp r5, r6
 8000414:	42b5      	cmp	r5, r6

	IT eq
 8000416:	bf08      	it	eq
	bleq red_led_off
 8000418:	f7ff ffa2 	bleq	8000360 <red_led_off>

	cmp r5, r6
 800041c:	42b5      	cmp	r5, r6
	IT ne
 800041e:	bf18      	it	ne
	blne red_led_on
 8000420:	f7ff ff98 	blne	8000354 <red_led_on>

	eor r5, r6
 8000424:	ea85 0506 	eor.w	r5, r5, r6
	str r5, [r4]
 8000428:	6025      	str	r5, [r4, #0]

0800042a <RET>:

RET: pop { r4, r5, r6, pc }
 800042a:	bd70      	pop	{r4, r5, r6, pc}
	ldr r4, =MSECCNT
 800042c:	24000004 	.word	0x24000004
	ldr r4, =MSECMAX
 8000430:	24000008 	.word	0x24000008
	ldr r4, =LED_STATUS
 8000434:	2400000c 	.word	0x2400000c

08000438 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000438:	f8df d048 	ldr.w	sp, [pc, #72]	; 8000484 <LoopFillZerobss+0x26>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	4812      	ldr	r0, [pc, #72]	; (8000488 <LoopFillZerobss+0x2a>)
  ldr r1, =_edata
 800043e:	4913      	ldr	r1, [pc, #76]	; (800048c <LoopFillZerobss+0x2e>)
  ldr r2, =_sidata
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <LoopFillZerobss+0x32>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <LoopFillZerobss+0x36>)
  ldr r4, =_ebss
 8000454:	4c10      	ldr	r4, [pc, #64]	; (8000498 <LoopFillZerobss+0x3a>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

// Initialize DWT counters - added for cycle measurements
  ldr r0, =DEMCR
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <LoopFillZerobss+0x3e>)
  ldr r1, [r0]
 8000464:	6801      	ldr	r1, [r0, #0]
  orr r1,r1,#(1<<24)  // Enabling TRCENA bit (is already on according to SFRs)
 8000466:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  str r1, [r0]
 800046a:	6001      	str	r1, [r0, #0]

  ldr r0, =DWT_CYCCNT
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopFillZerobss+0x42>)
  mov r3,#0
 800046e:	f04f 0300 	mov.w	r3, #0
  str r3,[r0]
 8000472:	6003      	str	r3, [r0, #0]

  ldr r0, =DWT_CTRL
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <LoopFillZerobss+0x46>)
  ldr r2, [r0]
 8000476:	6802      	ldr	r2, [r0, #0]
  orr r2,r2,#1      // Enabling CYCCNTENA bit
 8000478:	f042 0201 	orr.w	r2, r2, #1
  str r2, [r0]
 800047c:	6002      	str	r2, [r0, #0]

/* Call the application's entry point.*/
//eternal:  b  eternal
  bl  main
 800047e:	f7ff ff85 	bl	800038c <main>
  bx  lr
 8000482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000484:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000488:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800048c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000490:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000494:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000498:	2400002c 	.word	0x2400002c
  ldr r0, =DEMCR
 800049c:	e000edfc 	.word	0xe000edfc
  ldr r0, =DWT_CYCCNT
 80004a0:	e0001004 	.word	0xe0001004
  ldr r0, =DWT_CTRL
 80004a4:	e0001000 	.word	0xe0001000

080004a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC3_IRQHandler>
	...

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
